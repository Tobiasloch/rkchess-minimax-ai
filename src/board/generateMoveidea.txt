Queen:
//Check for boarder collision	
				else if(start & left != 0){
					if (start == 63 && change <= 1 && change >= 5){
					// return null
						if (change >= 5) {
							iterator-> moveNum += 5;
						}else {
							 iterator-> moveNum += 2; 
						}
					}else if (start == 7 && change > 2){
					// return null;
						iterator-> moveNum += 6;
					}else if (change >= 5) {
						// return null
						iterator-> moveNum += 3;
					}
				} else if(start & right != 0){
					if (start == 0 && change > 0 && change < 6){
						// return null;
						iterator-> moveNum += 5;
					}else if (start == 56 && change > 3){
					// return null;
						if (change = 7) {
							iterator-> moveNum += 1;
						}else{
							iterator-> moveNum += 4;
						}
					}else if (change >= 1 && change <= 3){
						// return null;
						iterator-> moveNum += 3;
					}	
				}else if (start > 0 && start < 7){
					if (change >= 3 && change <= 5){
					// return null;
					iterator-> moveNum += 3;
					}
				}else if (start > 56 && start < 63){
					if (change >= 1 || change == 7){
					// return null;
						if (change = 7) {;
							iterator-> moveNum += 3;
						}else {
							iterator-> moveNum += 2;	
						}
					}
				}
						
Bishop:
//Check for boarder collision	
				else if(start & left != 0){
					if (start == 63 && change != 1){
					// return null
							iterator-> moveNum += 1;
					}else if (start == 7 && change != 0){
					// return null;
						iterator-> moveNum += 3;
					}else if (change >= 2) {
						// return null
						iterator-> moveNum += 2;
					}
				} else if(start & right != 0){
					if (start == 0 && change != 3){
						// return null;
						iterator-> moveNum += 3;
					}else if (start == 56 && change != 2){
					// return null;
						if (change = 3) {
							iterator-> moveNum += 1;
						}else{
							iterator-> moveNum += 2;
						}
					}else if (change <= 1 ){
						// return null;
						iterator-> moveNum += 2;
					}	
				}else if (start > 0 && start < 7){
					if (change >= 1 && change <= 3){
					// return null;
					iterator-> moveNum += 2;
					}
				}else if (start > 56 && start < 63){
					if (change >= 3 || change == 0){
					// return null;
						if (change = 0) {;
							iterator-> moveNum += 1;
						}else {
							iterator-> moveNum += 2;	
						}
					}
				}
				
ROOK:
//Check for boarder collision	
				else if(start & left != 0){
					if (start == 63 && change != 1){
					// return null
							iterator-> moveNum += 1;
					}else if (start == 7 && change != 0){
					// return null;
						iterator-> moveNum += 3;
					}else if (change >= 2) {
						// return null
						iterator-> moveNum += 2;
					}
				} else if(start & right != 0){
					if (start == 0 && change != 3){
						// return null;
						iterator-> moveNum += 3;
					}else if (start == 56 && change != 2){
					// return null;
						if (change = 3) {
							iterator-> moveNum += 1;
						}else{
							iterator-> moveNum += 2;
						}
					}else if (change <= 1 ){
						// return null;
						iterator-> moveNum += 2;
					}	
				}else if (start > 0 && start < 7){
					if (change >= 1 && change <= 3){
					// return null;
					iterator-> moveNum += 2;
					}
				}else if (start > 56 && start < 63){
					if (change >= 3 || change == 0){
					// return null;
						if (change = 0) {;
							iterator-> moveNum += 1;
						}else {
							iterator-> moveNum += 2;	
						}
					}
				}
King:
					//Check for boarder collision	
				else if(start & left != 0){
					if (start == 63 && change <= 1 && change >= 5){
					// return null
						if (change >= 5) {
							iterator-> moveNum += 5;
						}else {
							 iterator-> moveNum += 2; 
						}
					}else if (start == 7 && change > 2){
					// return null;
						iterator-> moveNum += 6;
					}else if (change >= 5) {
						// return null
						iterator-> moveNum += 3;
					}
				} else if(start & right != 0){
					if (start == 0 && change > 0 && change < 6){
						// return null;
						iterator-> moveNum += 5;
					}else if (start == 56 && change > 3){
					// return null;
						if (change = 7) {
							iterator-> moveNum += 1;
						}else{
							iterator-> moveNum += 4;
						}
					}else if (change >= 1 && change <= 3){
						// return null;
						iterator-> moveNum += 3;
					}	
				}else if (start > 0 && start < 7){
					if (change >= 3 && change <= 5){
					// return null;
					iterator-> moveNum += 3;
					}
				}else if (start > 56 && start < 63){
					if (change >= 1 || change == 7){
					// return null;
						if (change = 7) {;
							iterator-> moveNum += 3;
						}else {
							iterator-> moveNum += 2;	
						}
					}
				}
const  uint64_t left = 0x8080808080808080;
const  uint64_t right = 72340172838076673;